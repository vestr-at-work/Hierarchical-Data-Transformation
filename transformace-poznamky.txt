JOLT:
- deklarativní: chceme taky
- v JSONu: chceme taky

- modulární (pro každý druh transformace existuje vlastní doménově specifický podjazyk): zajímavé, můžeme využít také. skvělé pro rozšíření ale potenciálně horší na prvotní zorientování se v jazyce.

- velmi cool mi přijde, že při deklaracích transformací jde od vstupu k výstupu a ne naopak. to znamená, že nedeklaruje formát výstupu, ale vychází z formátu vstupu(!) a kdykoliv narazí na hodnotu, kterou chce využít na výstupu, tak místo hodnoty samotné zapíše cestu k pozici ve výstupním formátu. to zjednodušuje implementaci a relativně intuitivně se i používá. +společně s wildcards a proměnnými je relativně mocné. mohlo by také pomoct se streamováním? procházet vstup streamovaně a pokaždé jen hodnotu na kterou narazíme transformovat na výstup?

- primárně pracuje pouze s formátem, takže nemá způsob jak např. porovnat název nějakého labelu s konstatním řetězcem a vypsat na výstup pouze pokud se rovná. mohli bychom se inspirovat se základem, ale přidat i funkce na práci s daty?

JSON Transforms:
- deklarativní(ish)
- psaný v JSONu a javascriptu

- rekurzivní způsob vyhodnocování: mocný a osvedčený přístup (např. v XSLT). přehledné a umožňuje složité transformace rozdělit do více jednodušších. šlo by zapsat pouze v JSONu.

- využívá JSPath: chceme využívat již existující dotazovací jazyk? vlastně ani nemůžeme, protože Ur není úplně validní JSON. musíme mít vlastní(!) JSON Transforms velmi spoléhá na JSPath (např. s funkcemi jako je filtrování a podobně)

poznámky obecně:
- líbilo by se mi kdyby složitější transformace mohly (nebo třeba i musely) být dělány přes více jednoduších kroků. pomůže to s přehledností a i s ověřováním správnosti daných transformací.
- design jazyka by měl být modulární a rozšiřitelný nejen námi. user defined moduly? 
